import tkinter as tk
from tkinter import messagebox, simpledialog
import sqlite3

# Set up database
conn = sqlite3.connect('contacts.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS contacts
             (id INTEGER PRIMARY KEY AUTOINCREMENT, 
              name TEXT NOT NULL, 
              phone TEXT NOT NULL, 
              email TEXT, 
              address TEXT)''')
conn.commit()

# Functions to interact with the database
def add_contact(name, phone, email, address):
    c.execute("INSERT INTO contacts (name, phone, email, address) VALUES (?, ?, ?, ?)",
              (name, phone, email, address))
    conn.commit()

def get_all_contacts():
    c.execute("SELECT id, name, phone FROM contacts")
    return c.fetchall()

def search_contact(search_term):
    c.execute("SELECT * FROM contacts WHERE name LIKE ? OR phone LIKE ?", ('%' + search_term + '%', '%' + search_term + '%'))
    return c.fetchall()

def get_contact(contact_id):
    c.execute("SELECT * FROM contacts WHERE id = ?", (contact_id,))
    return c.fetchone()

def update_contact(contact_id, name, phone, email, address):
    c.execute("UPDATE contacts SET name = ?, phone = ?, email = ?, address = ? WHERE id = ?",
              (name, phone, email, address, contact_id))
    conn.commit()

def delete_contact(contact_id):
    c.execute("DELETE FROM contacts WHERE id = ?", (contact_id,))
    conn.commit()

# GUI setup
root = tk.Tk()
root.title("Contact Book")

def add_contact_gui():
    def save_contact():
        name = name_entry.get()
        phone = phone_entry.get()
        email = email_entry.get()
        address = address_entry.get()
        if name and phone:
            add_contact(name, phone, email, address)
            messagebox.showinfo("Success", "Contact added successfully!")
            add_window.destroy()
        else:
            messagebox.showwarning("Input Error", "Name and phone are required fields.")
    
    add_window = tk.Toplevel(root)
    add_window.title("Add Contact")

    tk.Label(add_window, text="Name").grid(row=0, column=0, padx=10, pady=10)
    name_entry = tk.Entry(add_window)
    name_entry.grid(row=0, column=1, padx=10, pady=10)
    
    tk.Label(add_window, text="Phone").grid(row=1, column=0, padx=10, pady=10)
    phone_entry = tk.Entry(add_window)
    phone_entry.grid(row=1, column=1, padx=10, pady=10)
    
    tk.Label(add_window, text="Email").grid(row=2, column=0, padx=10, pady=10)
    email_entry = tk.Entry(add_window)
    email_entry.grid(row=2, column=1, padx=10, pady=10)
    
    tk.Label(add_window, text="Address").grid(row=3, column=0, padx=10, pady=10)
    address_entry = tk.Entry(add_window)
    address_entry.grid(row=3, column=1, padx=10, pady=10)
    
    tk.Button(add_window, text="Save Contact", command=save_contact).grid(row=4, columnspan=2, pady=10)

def view_contacts_gui():
    contacts = get_all_contacts()
    view_window = tk.Toplevel(root)
    view_window.title("View Contacts")

    for idx, (contact_id, name, phone) in enumerate(contacts):
        tk.Label(view_window, text=f"{name} - {phone}").grid(row=idx, column=0, padx=10, pady=5)
        tk.Button(view_window, text="Details", command=lambda cid=contact_id: view_contact_detail(cid)).grid(row=idx, column=1, padx=10, pady=5)

def view_contact_detail(contact_id):
    contact = get_contact(contact_id)
    detail_window = tk.Toplevel(root)
    detail_window.title("Contact Details")

    tk.Label(detail_window, text=f"Name: {contact[1]}").grid(row=0, column=0, padx=10, pady=5)
    tk.Label(detail_window, text=f"Phone: {contact[2]}").grid(row=1, column=0, padx=10, pady=5)
    tk.Label(detail_window, text=f"Email: {contact[3]}").grid(row=2, column=0, padx=10, pady=5)
    tk.Label(detail_window, text=f"Address: {contact[4]}").grid(row=3, column=0, padx=10, pady=5)
    tk.Button(detail_window, text="Update", command=lambda: update_contact_gui(contact_id)).grid(row=4, column=0, padx=10, pady=5)
    tk.Button(detail_window, text="Delete", command=lambda: delete_contact_gui(contact_id, detail_window)).grid(row=4, column=1, padx=10, pady=5)

def search_contact_gui():
    def perform_search():
        search_term = search_entry.get()
        results = search_contact(search_term)
        result_window = tk.Toplevel(root)
        result_window.title("Search Results")

        for idx, contact in enumerate(results):
            tk.Label(result_window, text=f"{contact[1]} - {contact[2]}").grid(row=idx, column=0, padx=10, pady=5)
            tk.Button(result_window, text="Details", command=lambda cid=contact[0]: view_contact_detail(cid)).grid(row=idx, column=1, padx=10, pady=5)

    search_window = tk.Toplevel(root)
    search_window.title("Search Contact")

    tk.Label(search_window, text="Search by name or phone").grid(row=0, column=0, padx=10, pady=10)
    search_entry = tk.Entry(search_window)
    search_entry.grid(row=0, column=1, padx=10, pady=10)
    tk.Button(search_window, text="Search", command=perform_search).grid(row=1, columnspan=2, pady=10)

def update_contact_gui(contact_id):
    contact = get_contact(contact_id)
    def save_updated_contact():
        name = name_entry.get()
        phone = phone_entry.get()
        email = email_entry.get()
        address = address_entry.get()
        if name and phone:
            update_contact(contact_id, name, phone, email, address)
            messagebox.showinfo("Success", "Contact updated successfully!")
            update_window.destroy()
        else:
            messagebox.showwarning("Input Error", "Name and phone are required fields.")

    update_window = tk.Toplevel(root)
    update_window.title("Update Contact")

    tk.Label(update_window, text="Name").grid(row=0, column=0, padx=10, pady=10)
    name_entry = tk.Entry(update_window)
    name_entry.insert(0, contact[1])
    name_entry.grid(row=0, column=1, padx=10, pady=10)
    
    tk.Label(update_window, text="Phone").grid(row=1, column=0, padx=10, pady=10)
    phone_entry = tk.Entry(update_window)
    phone_entry.insert(0, contact[2])
    phone_entry.grid(row=1, column=1, padx=10, pady=10)
    
    tk.Label(update_window, text="Email").grid(row=2, column=0, padx=10, pady=10)
    email_entry = tk.Entry(update_window)
    email_entry.insert(0, contact[3])
    email_entry.grid(row=2, column=1, padx=10, pady=10)
    
    tk.Label(update_window, text="Address").grid(row=3, column=0, padx=10, pady=10)
    address_entry = tk.Entry(update_window)
    address_entry.insert(0, contact[4])
    address_entry.grid(row=3, column=1, padx=10, pady=10)
    
    tk.Button(update_window, text="Save Changes", command=save_updated_contact).grid(row=4, columnspan=2, pady=10)

def delete_contact_gui(contact_id, parent_window):
    if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this contact?"):
        delete_contact(contact_id)
        messagebox.showinfo("Success", "Contact deleted successfully!")
        parent_window.destroy()

tk.Button(root, text="Add Contact", command=add_contact_gui).pack(pady=10)
tk.Button(root, text="View Contacts", command=view_contacts_gui).pack(pady=10)
tk.Button(root, text="Search Contact", command=search_contact_gui).pack(pady=10)

root.mainloop()
